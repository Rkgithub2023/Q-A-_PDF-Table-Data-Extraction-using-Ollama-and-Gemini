# -*- coding: utf-8 -*-
"""QA_Pdf_extraction_chatbot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TKsvDe4TGQXqo7u_U4cnFUQWPNzq6ynT
"""

!pip install pdfplumber

"""  ##!pip install sentence-transformers
  ##!!pip install tiktoken
  ##!pip install langchain-community faiss-gpu
  ##!pip install langchain-google-genai
"""

from langchain.vectorstores import FAISS
from langchain.chains import RetrievalQA
from langchain.schema import Document
from langchain_core.prompts import PromptTemplate
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.chains.question_answering import load_qa_chain
from langchain.schema import Document
from langchain.embeddings import HuggingFaceEmbeddings
from langchain.text_splitter import RecursiveCharacterTextSplitter

import pdfplumber
import pandas as pd
from pdfplumber.utils import extract_text, get_bbox_overlap, obj_to_bbox

def process_pdf(pdf_path):
    pdf = pdfplumber.open(pdf_path)
    all_text = []
    df_list = []
    for page in pdf.pages:
        filtered_page = page
        chars = filtered_page.chars

        for table in page.find_tables():
            first_table_char = page.crop(table.bbox).chars[0]
            filtered_page = filtered_page.filter(lambda obj:
                get_bbox_overlap(obj_to_bbox(obj), table.bbox) is None
            )
            chars = filtered_page.chars

            df = pd.DataFrame(table.extract())
            df.columns = df.iloc[0]
            markdown = df.drop(0).to_markdown(index=False)
            df_list.append(df)
            chars.append(first_table_char | {"text": markdown})

        page_text = extract_text(chars, layout=True)
        all_text.append(page_text)

    pdf.close()
    return "\n".join(all_text)
    # return df_list

def get_chunks(file_path):
  with open(file_path, 'r', encoding='utf-8') as file:
    text = file.read()
  text_splitter = RecursiveCharacterTextSplitter(
      chunk_size=1000,
      chunk_overlap=200,
      add_start_index=True,
      )
  chunks = text_splitter.split_text(text)
  return chunks

def get_vector_Store(chunks):
  embedding_modelname = "sentence-transformers/all-mpnet-base-v2"
  model_kwargs = {'device': 'cpu'}
  embeddings = HuggingFaceEmbeddings(model_name=embedding_modelname, model_kwargs=model_kwargs)
  documents = [Document(page_content=chunk) for chunk in chunks]
  vectorstore=FAISS.from_documents(documents,embeddings)
  vectorstore.save_local("faiss_index")

#retriever=persist_vectorstore.as_retriever(search_type="similarity", search_kwargs={"k": 3})

import os
# from dotenv import load_dotenv
# load_dotenv()

def get_conversational_chain():

  persist_vectorstore=FAISS.load_local("faiss_index",embeddings,allow_dangerous_deserialization=True)

  prompt_template="""You are a highly analytical and very smart Generative AI assistant. You will receive a query and use the relevant information from a retrieved set of documents to answer it. Follow these steps:\n"
            "1. Retrieve the most relevant documents based on the query.\n"
            "2. Carefully analyze the retrieved documents in relation to the query.\n"
            "3. Provide a concise and direct answer to the query, based only on the information found in the documents.\n"
            "4. If the answer is not available in the retrieved documents, respond with 'Answer: answer not available in the context'.\n"
            "5. Ensure that the answer is specific, relevant, and concise. Avoid including irrelevant information.\n"

            Context:\n {context}?\n
            Question:\n {question}\n

            "Answer the query in a clear sentence directly after 'Answer: '.
            """
  model = ChatGoogleGenerativeAI(
      model="gemini-1.5-pro",
      temperature=0,
      api_key= "AIzaSyDCZOa3qR6W2F-L3mV9hIP18pY0zmitblQ"
      )
  prompt=PromptTemplate(template=prompt_template,input_variables=["context","question"])
  chain=load_qa_chain(model,chain_type="stuff",prompt=prompt)
  return chain

def user_input(user_query):
  docs=persist_vectorstore.similarity_search(user_query)
  chain=get_conversational_chain()

  response=chain(
      {"input_documents":docs,"question":user_query}
      ,return_only_outputs=True
      )
  return response['output_text']

pdf_path = r"Paper18_Set1_Sol.pdf"
extracted_text = process_pdf(pdf_path)

file_path = '/content/extracted_file.txt'
with open(file_path, 'w') as file:
    file.write(extracted_text)

chunks=get_chunks(file_path)
get_vector_Store(chunks)

query1 = "what is the things we should declare before applying for GST registration"

result = user_input(query1)

print(result)

# qa=RetrievalQA.from_chain_type(llm=llm,chain_type="stuff",retriever=retriever)

query1="Describe the power and duties of Anti-profiteering committee. "
  result=user_input(query1)
  print(result)

query1="what is the Total CIF value/ Assessable Value"
result=user_input(query1)
print(result)
#correct
#correct

query1="what is the value in for this 'Input tax credit which are used to supply taxable as well as exempted output supplies'"
result=user_input(query1)
print(result)
#correct
#correct

query1="""crown Beers India Pvt. Ltd., supplies raw material to a job worker
Kareena Ltd. for manufacture of alcoholic liquor for human consumption.
After completing the job-work, the finished product of 5,000 beer bottles
are returned to Crown Beers India Pvt. Ltd., putting the retail sale price as
`200 on each bottle (inclusive of duties and taxes). Kareena Ltd., charged
100 per bottle as job work charges of carrying out of intermediate
production process of alcoholic liquor for human consumption from Crown
Beers India Pvt. Ltd. Find the GST liability if rate is 18% (CGST 9% and
SGST 9%) in the hands of Kareena Ltd."""
result=user_input(query1)
print(result)
#correct
#correct

query1="""Bharat Gas sells cooking gas cylinders. Subsidy directly transferred to the
account of the customer. Selling price per cylinder is ` 800. Customer
received subsidy ` 200 directly from Government to his bank account. Net
outflow of the buyer is ` 600. Find the value of supply of goods (per
cylinder) in the hands of Bharat Gas.  """
result=user_input(query1)
print(result)
#correct
#correct

query1="""
Raman Hotels supplying only accommodation services in Chennai. Turnover of
Raman Hotels is less than 20 Lakhs. Raman Hotels listed hotel on online platform
namely Makemytrip.
The following categories of rooms get booked by the Makemytrip company who
pay to Raman Hotels after deducting their commission.
(A)  Declared value per room (category 1), Non AC Room `950 per Night.
(B)
Declared value per room (category 2), AC Room `1,800 per Night.
(C)  Declared value per room (category 3), AC Room `7,000 per Night, where
additional bed `1,800 per Night.
(D)  Declare value per room (category 4), AC Room `10,000 per Night, but
amount charged is `7000.
You are required to answer:
(1)
Who is liable to pay GST and
(2)
Net GST liability.
"""
result=user_input(query1)
print(result)

#old answer

query1="what is the Value of taxable services for a tamil movie"
result=user_input(query1)
print(result)

query1="what is the abbreviation of RoDTEP"
result=user_input(query1)
print(result)

query1="what is the mode of issue for RoDTEP"
result=user_input(query1)
print(result)
#correct
#RoDTEP is issued in the form of transferable duty credits.

query1="is RoDTEP transferable"
result=user_input(query1)
print(result)
#correct
#correct

query1="what is the freight amount for the imported goods"
result=user_input(query1)
print(result)
#correct
#correct

query1="what is the total Assessable Value for the imported goods "
result=user_input(query1)
print(result)
#incorrect

query1="value for taxable supply of goods"
result=user_input(query1)
print(result)
#correct